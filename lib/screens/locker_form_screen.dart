import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../models/locker.dart';
import '../providers/locker_provider.dart';

class LockerFormScreen extends StatefulWidget {
  final Locker? locker;

  LockerFormScreen({this.locker});

  @override
  _LockerFormScreenState createState() => _LockerFormScreenState();
}

class _LockerFormScreenState extends State<LockerFormScreen> {
  final _formKey = GlobalKey<FormState>();
  final TextEditingController _locationController = TextEditingController();
  String? _status;
  String? _type;

  @override
  void initState() {
    super.initState();
    if (widget.locker != null) {
      _locationController.text = widget.locker!.location;
      _status = widget.locker!.status;
      _type = widget.locker!.type;
    }
  }

  @override
  void dispose() {
    _locationController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    var lockerProvider = Provider.of<LockerProvider>(context, listen: false);

    return Scaffold(
      appBar: AppBar(
        title: Text(widget.locker == null ? 'Add Locker' : 'Edit Locker'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: Column(
            children: [
              TextFormField(
                controller: _locationController,
                decoration: InputDecoration(labelText: 'Location'),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter a location';
                  }
                  return null;
                },
              ),
              SizedBox(height: 20),
              DropdownButtonFormField<String>(
                value: _status,
                decoration: InputDecoration(labelText: 'Status'),
                items: ['available', 'reserved', 'overdue']
                    .map((status) => DropdownMenuItem(
                          value: status,
                          child: Text(status),
                        ))
                    .toList(),
                onChanged: (value) {
                  setState(() {
                    _status = value;
                  });
                },
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please select a status';
                  }
                  return null;
                },
              ),
              SizedBox(height: 20),
              DropdownButtonFormField<String>(
                value: _type,
                decoration: InputDecoration(labelText: 'Type'),
                items: ['temporary', 'permanent']
                    .map((type) => DropdownMenuItem(
                          value: type,
                          child: Text(type),
                        ))
                    .toList(),
                onChanged: (value) {
                  setState(() {
                    _type = value;
                  });
                },
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please select a type';
                  }
                  return null;
                },
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: () async {
                  if (_formKey.currentState!.validate()) {
                    if (widget.locker == null) {
                      // Add new locker
                      await lockerProvider.addLocker(Locker(
                        id: '', // ID will be generated by Firestore
                        location: _locationController.text,
                        status: _status!,
                        type: _type!,
                      ));
                    } else {
                      // Update existing locker
                      await lockerProvider.updateLocker(widget.locker!.id, {
                        'location': _locationController.text,
                        'status': _status!,
                        'type': _type!,
                      });
                    }
                    Navigator.pop(context);
                  }
                },
                child: Text(widget.locker == null ? 'Add' : 'Update'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
